jqueryを使うときは
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
のコードをjsを読み込む前に挟み込む。
jqueryの基本
$('セレクタ').操作();
jsだと以下のような表記になる。
const box = document.getElementById('box');
box.textContent = 'Hello jQuery!';

jqueryはjsで記入されている。
jsと違ってjqueryはブラウザ間での微妙な表現系の違いを意識せずに書くことができる。

jsの読み込みとjqueryのsrriptは読み込まれた時点でその以前に表記されたものに大して適用される。
そのため全ての記入が終わった</body>の前に書くのが良い。

しかし画像の読み込みなどはその時点で終わってない可能性があるため、
全てが完了してから起動したいものに関してはloadイベントを使用する。



イベントの種類
・load
・click
・マウスなんちゃら

セレクタに該当するもの全てに作用する。
直下セレクタというものを使うこともできる。
子孫要素と子要素
・子孫要素はその要素の下にある全て
・子要素はその要素の直下のもの



メソッド
・onメソッドはイベント発生用のメソッド
・textは指定されたセレクタに完全置換
・prependは挿入する
・htmlメソッドは既存のものとhtmlごと置き換える
・valメソッドは入力された値を取得することができる。
・attr() の引数に指定した属性名の 属性値を取得 できます。
  該当のセレクタが複数あるときは一番最初の要素だけ取得できる。
・$('セレクタ').attr('属性名', '属性値')
  第二引数を指定した場合、指定のセレクタ全ての属性名を第二引数の属性値に変更することができる。
・hideで要素を非表示にすることができる。
・非表示にした要素を表示するときはshowメソッドを使用する。
・toggleメソッドは表示非表示を変更するときに使用する。
・fadeInメソッドは非表示の状態から、ゆっくり表示します。
・fadeOutメソッドは表示した状態から、ゆっくり非表示にします。
・slideUp,slideDownメソッド
・animateメソッド
$('セレクタ').animate('CSSプロパティのオブジェクト', アニメーションする時間)
指定の時間をかけて指定のcssプロパティへと変化する。



属性とはそのタグが持つ特製、例えばid=textの場合は
id が属性名で、test が属性値です。
属性に関してはほとんど指定ができる。
<a href="pm.html"></p>というタグに関しては
$('[href="pm.html"]').text('こんにちは！');


属性とともに、要素名を指定することもできます。
この場合は、'要素名[属性名="属性値"]'という形で表記する。

$('p').css('color', 'red');
このように操作コマンドにcssを適用することも可能
cssを複数適用する場合はオブジェクトを渡す。
$('#box').css({
  'color': '#ffffff',
  'background-color': '#000000',
});
こんな感じ


また、下記のように選択要素を変更することもできる。この場合選択したouterからその子要素へとcssの適用対象は変更される。
$('#outer')
  .children()
  .css({ 'background-color': 'skyblue' });

parentメソッドはセレクタの親要素を全て選択する。
childrenメソッド以外にもparentメソッドも存在する。




$('#box').children()	id=”box”直下の子要素
$('#box').find('a')	id=”box”の子を辿って見つかったすべてのa
$('#box').closest('div')	id=”box”の親を辿って最初に見つかったdiv
$('#box').next()	id=”box”と同じ階層にある次の要素
$('#box').prev()	id=”box”と同じ階層にある1つ前の要素
$('#box').parent()	id=”box”の直接の親要素
$('#box').siblings('.item')	id=”box”と同じ階層でitemクラスを持つすべての要素


コンソールの中でjqueryを使用することもできる。


jqueryではイベント発生時の関数の呼びだしは次のようにコードする。
jQueryオブジェクト.on(イベントの種類, イベントが発生したときに呼び出される関数)

$('.mylink').on('click', (e) => {
  // hrefのリンク先に飛ばないようにする
  e.preventDefault();

  alert('どろん！');
});
例えばクリック時に起動する関数
イベントリスナーにはイベントオブジェクトが渡される。

後から追加した要素にイベントハンドラを追加する場合はやりかたがある。

e.preventDefault();で
フォーム送信を取り消すことができる。
イベント発生時に呼び出される関数のことをイベントハンドラと呼ぶ

後から追加要素へのイベントの適用方法その１
・親要素にイベントハンドラを登録する方法です。jQueryで親要素にイベントハンドラを登録するときも、onメソッドを使います。
この場合 on() の第１引数にイベント名、第２引数にイベント発生元を指定するセレクタ、第３引数にイベントハンドラを渡します。
・後から追加する要素をDOM要素として生成、イベントハンドラを登録する。
jQueryでDOM要素を生成するには、$('作成す���要素のタグ', {要素に設定する属性名: '属性値'}) という形で指定します。

イベントハンドラに渡されるイベントオブジェクトには、任意のデータを追加できます。
そのためにはonメソッドの第２引数に、追加したいデータをオブジェクトとして渡します。
$('.my-click').on('click', { test: 'テストデータ' }, (e) => {
  console.log('追加したデータ：', e.data.test);
});

アニメーションの方法

・アコーディオンメニュー
・タブ
・トップページに戻るボタン
・カルーセル、横スライド
複数の画像を横スライドで表示する技法である。
・ライトボックス、画像のポップアップ
・パララックス（視差効果）、画面に奥行きがあるように見せる技法の一つ



//////質問事項、関数ないで定義したconstは他でエラーが怒る。



const showTab=(selector)=>{
  console.log(selector);
  $('.tabs-menu div').removeClass('active');
  $('.tabs-menu div[id="${select}"]').addClass('active');
  $(".tabs-content > div").hide();  //他のコンテンツを排除
  $(selector).show();　　//指定のコンテンツを表示
}
//タブのdivを三つともactive解除、id=selectorのdivのみactive




$(".tabs-menu div").on("click",(e)=>{
  const select=$(e.target).attr("id");
  //selectからsliceでコンテンツidへ変換するしょり、selectorにいれる。
  const lastletter=select.slice(-1);
  const selector="#tabs-"+lastletter;
  showTab(selector);
});
showTab('#tabs-a');


この場合呼び出したshowtabのselectでエラーが怒っているがこれだめなん?

topページ遷移ボタンの作り方
scrollTop()は、ページのスクロール位置を取得するメソッドです
